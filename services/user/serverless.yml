# For full config options, check the docs:
#    docs.serverless.com

service: user
frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  environment:
    AWS_MYSQL_HOST: ${env:AWS_MYSQL_HOST}
    AWS_MYSQL_USERNAME: ${env:AWS_MYSQL_USERNAME}
    AWS_MYSQL_DBNAME: ${env:AWS_MYSQL_DBNAME}
    AWS_MYSQL_PASSWORD: ${env:AWS_MYSQL_PASSWORD}
    AWS_KEY: ${env:AWS_KEY}
    AWS_SECRET: ${env:AWS_SECRET}
    AWS_DEPLOY_REGION: ${env:AWS_DEPLOY_REGION}
    AWS_USER_REGISTERED_TOPIC_ARN: ${env:AWS_USER_REGISTERED_TOPIC_ARN}
    TWILIO_SID: ${env:TWILIO_SID}
    TWILIO_TOKEN: ${env:TWILIO_TOKEN}
    TWILIO_FROM: ${env:TWILIO_FROM}
    # AWS_USER_WALLET_REGISTERED_TOPIC_ARN:

functions:
  user-create:
    handler: controllers/create.create
    events:
      - http:
          path: user
          method: post
          cors: true
          ## NO AUTHORIZER
  user-fetch:
    handler: controllers/user.fetch
    events:
      - http:
          path: user/{user_id}
          method: get
          cors: true
          authorizer: user-authorizer
  user-fetch_query:
    handler: controllers/user.fetchQuery
    events:
      - http:
          path: user
          method: get
          cors: true
          authorizer: user-authorizer
  user-update:
    handler: controllers/update.update
    events:
      - http:
          path: user
          method: put
          cors: true
          authorizer: user-authorizer
  user-update-profile_img:
    handler: services/user/controllers/update.profileImg
    events:
      - http:
          path: user/profile_img
          method: put
          cors: true
          authorizer: user-authorizer
  user-validate:
    handler: controllers/user.validate
    events:
      - http:
          path: user/{user_id}/validate
          method: post
          cors: true
          authorizer: user-authorizer
  user-authorizer:
    name: user-authorizer
    handler: lib/controllers/authorizer.defaultAuthorizer

package:
  excludeDevDependencies: false

resources:
  Resources:
    S3BucketPhotos:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: holdr-${self:provider.stage}-user-photos
        # BucketName: ${self:provider.stage}_photos
        # add additional custom bucket configuration here